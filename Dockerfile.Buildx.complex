#####################################
#
# Create AqualinkD container for release (includes AMD64 and ARM64 for >Pi4 with 64 bit os and Linux PC)
# Build container for buildx
#
# Enable multi platform
# docker buildx create --use --platform=linux/arm64,linux/amd64 --name multi-platform-builder
# docker buildx inspect --bootstrap
#
# Build
# docker buildx build --platform=linux/amd64,linux/arm64 --output=./crap --file /Dockerfile.test -t aqualinkd-test .
# docker buildx build --platform=linux/amd64,linux/arm64  --file Dockerfile.test --output type=docker -t aqualinkd-test .
# docker build --file Dockerfile.test --progress=plain -t aqualinkd-test .
#
# adding --progress=plain helps with debug
#
# Clean the build env and start again
# docker buildx prune
#
#
#  docker build -f ./Dockerfile.buildrelease  .
#
#####################################


# Starting with base debian:bookworm and installing build-essential seems to be quicker than starting with gcc:bookworm
#FROM --platform=$BUILDPLATFORM gcc:12-bookworm AS aqualinkd-build
FROM --platform=$BUILDPLATFORM debian:bookworm AS aqualinkd-build

#ARG TARGETPLATFORM
#ARG BUILDPLATFORM
#ARG BUILDVARIANT
#ARG BUILDOS
ARG BUILDARCH
#ARG TARGETOS
ARG TARGETARCH

# Print all buildx variables 
RUN echo "Build Arch $BUILDARCH" && \
    echo "Tagert OS $TARGETOS"

#    echo "Build Platform $BUILDPLATFORM" && \
#    echo "Target Platform $TARGETPLATFORM" && \
#    echo "Build Veriant $BUILDVARIANT" && \
#    echo "Build OS $BUILDOS" && \
#    echo "Target Arch $TARGETARCH"


# Setup build env
RUN apt-get update && \
    apt-get install -y \
                       build-essential \
                       libsystemd-dev


# If target is arm64 and build OS is NOT arm64, install toolchain for compiling arm64
RUN if [ "$BUILDARCH" != "$TARGETARCH" ] && [ "$TARGETARCH" = "arm64" ]; then \
          dpkg --add-architecture arm64 && \
          apt-get update && \
          apt-get install -y \
             libsystemd-dev:arm64 \
             gcc-aarch64-linux-gnu \
             binutils-arm-linux-gnueabi; \
    fi

# If target is amd64 and build OS is NOT amd64, install toolchain for compiling amd64
RUN if [ "$BUILDARCH" != "$TARGETARCH" ] && [ "$TARGETARCH" = "amd64" ]; then \
          dpkg --add-architecture amd64 && \
          apt-get update && \
          apt-get install -y \
              gcc-x86-64-linux-gnu \
              libsystemd-dev:amd64; \
    fi

RUN mkdir /home/AqualinkD
WORKDIR /home/AqualinkD
    
# Use github latest release version of aqualinkd
#RUN curl -sL $(curl -s https://api.github.com/repos/sfeakes/AqualinkD/releases/latest | grep "tarball_url" | cut -d'"' -f4) | tar xz --strip-components=1   
COPY ./build/AqualinkD-2.3.5/ /home/AqualinkD

RUN echo "AqualinkD Version $AQUALINKD_VERSION"

# Make AqualinkD
RUN make clean

RUN if [ "$BUILDARCH" != "$TARGETARCH" ]; then \
      make container-$TARGETARCH; \
    else \
      make container; \
    fi

#####################################
#
# Runtime container(s)
#
#####################################

FROM debian:bookworm-slim AS aqualinkd

VOLUME ["/aqualinkd"]
ARG AQUALINKD_VERSION

ARG TARGETARCH

RUN apt-get update \
  && apt-get install -y cron curl
 
# Set cron to read local.d
RUN sed -i '/EXTRA_OPTS=.-l./s/^#//g' /etc/default/cron

#Add Open Container Initiative (OCI) annotations.
#See: https://github.com/opencontainers/image-spec/blob/main/annotations.md

LABEL org.opencontainers.image.title="AqualinkD"
LABEL org.opencontainers.image.url="https://hub.docker.com/repository/docker/sfeakes/aqualinkd/general"
LABEL org.opencontainers.image.source="https://github.com/sfeakes/AqualinkD"
LABEL org.opencontainers.image.documentation="https://github.com/sfeakes/AqualinkD"
LABEL org.opencontainers.image.version=$AQUALINKD_VERSION

COPY --from=aqualinkd-build /home/AqualinkD/release/aqualinkd /usr/local/bin/aqualinkd                        
COPY --from=aqualinkd-build /home/AqualinkD/release/serial_logger /usr/local/bin/serial_logger
COPY --from=aqualinkd-build /home/AqualinkD/web/ /var/www/aqualinkd/
COPY --from=aqualinkd-build /home/AqualinkD/release/aqualinkd.conf /etc/aqualinkd.conf

COPY --from=aqualinkd-build /home/AqualinkD/extras/aqualinkd-docker.cmd /usr/local/bin/aqualinkd-docker

CMD ["sh", "-c", "/usr/local/bin/aqualinkd-docker"]
